<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SSM框架小记]]></title>
    <url>%2F2019%2F03%2F28%2FSSM%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[SSM框架小记 持续更新中…… mybatis核心配置文件的驼峰命名规则12345&lt;settings&gt; &lt;!-- 是否开启自动驼峰命名规则（camel case）映射， 即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true" /&gt;&lt;/settings&gt;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具类和插件]]></title>
    <url>%2F2019%2F03%2F27%2F%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8C%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[工具类和插件 持续更新中…… 表单校验插件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!-- jQuery Validation 1.14.0 --&gt;&lt;script src="/static/assets/plugins/jquery-validation/js/jquery.validate.js"&gt;&lt;/script&gt; &lt;!--自定义校验--&gt;&lt;script src="/static/assets/plugins/jquery-validation/js/additional-methods.js"&gt;&lt;/script&gt; &lt;!--国际化标准--&gt;&lt;script src="/static/assets/plugins/jquery-validation/js/localization/messages_zh.js"&gt;&lt;/script&gt; &lt;!-- 例子1 --&gt;&lt;form:input path="username" class="form-control required" placeholder="用户名" /&gt;$(function () &#123; $("#inputForm").validate(&#123; errorElement: 'span', errorClass: 'help-block', errorPlacement: function (error, element) &#123; element.parent().parent().attr("class", "form-group has-error"); error.insertAfter(element); &#125; &#125;);&#125;);&lt;!-- 例子2 写在js文件中--&gt;/**函数对象*/var Validate=function()&#123; /**初始化 相当于私有属性*/ var handlerInitValidate=function()&#123; /**手机校验规则*/ $.validator.addMethod("mobile", function (value, element) &#123; var length = value.length; var mobile = /^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;))+\d&#123;8&#125;)$/; return this.optional(element) || (length == 11 &amp;&amp; mobile.test(value)); &#125;, "手机号码格式错误"); &#125;; /** * 表单验证 * @param formId */ var handlerValidate = function (formId) &#123; $("#" + formId).validate(&#123; errorElement: 'span', errorClass: 'help-block', errorPlacement: function (error, element) &#123; element.parent().parent().attr("class", "form-group has-error"); error.insertAfter(element); &#125; &#125;); &#125;; return &#123; /**返回初始方法 相当于类中方法,方法名为init*/ init:function()&#123; handlerInitValidate(); &#125;, /** * 表单验证 需要前端去调用 * @param formId */ validateForm: function (formId) &#123; handlerValidate(formId); &#125; &#125;&#125;();/**文档加载*/$(function()&#123; Validate.init();&#125;) 参考网站 http://www.runoob.com/jquery/jquery-plugin-validate.html iCheck 复选/单选美化插件 http://blog.funtl.com:8080/2018/06/18/appose/jQuery-iCheck/ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!-- iCheck for checkboxes and radio inputs --&gt;&lt;link rel="stylesheet" href="/static/assets/plugins/iCheck/all.css"&gt;&lt;!-- iCheck 1.0.1 --&gt;&lt;script src="/static/assets/plugins/iCheck/icheck.min.js"&gt;&lt;/script&gt;&lt;!-- 前端Script中 --&gt;&lt;script&gt;&lt;script&gt;/** App.js 放在js文件中的函数对象*/var App=function()&#123; /**私有属性 初始化iCheck*/ var handlerInitCheckbox=function()&#123; /**默认情况下 iCheck 是不生效的 需要激活*/ $('input[type="checkbox"].minimal, input[type="radio"].minimal').iCheck(&#123; checkboxClass: 'icheckbox_minimal-blue', radioClass : 'iradio_minimal-blue' &#125;); //获取表头CheckBox _masterCheckBox=$('input[type="checkbox"].minimal.icheck_master'); //获取全部CheckBox集合 _checkbox=$('input[type="checkbox"].minimal'); &#125;; /**Checkbox全选功能*/ var handlerCheckboxAll=function()&#123; _masterCheckBox.on("ifClicked",function(e)&#123; //返回true表示未选中 if(e.target.checked)&#123; _checkbox.iCheck("uncheck"); //选中状态 &#125;else&#123; _checkbox.iCheck("check"); &#125; &#125;); &#125;; return&#123; init:function()&#123; handlerInitCheckbox(); handlerCheckboxAll(); &#125; //通过方法 获取全部CheckBox集合 getCheckbox:function()&#123; return _checkbox; &#125; &#125;&#125;(); $(function()&#123; App.init(); &#125;);]]></content>
      <categories>
        <category>拓展</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架的搭建]]></title>
    <url>%2F2019%2F03%2F22%2FSSM%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[SSM框架的搭建 在IDEA中进行最基本的SSM框架搭建 1、pom.xml的配置添加 Junit依赖，spring依赖，mybatis依赖，mybatis-spring依赖，MySQL驱动依赖,druid连接池依赖，Servlet/JSP/JSTL，json依赖，日志依赖。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;spring.version&gt;4.1.3.RELEASE&lt;/spring.version&gt; &lt;mybatis.version&gt;3.5.0&lt;/mybatis.version&gt; &lt;mybatis.spring.version&gt;1.3.2&lt;/mybatis.spring.version&gt; &lt;mysql.version&gt;5.1.32&lt;/mysql.version&gt; &lt;druid.version&gt;1.1.6&lt;/druid.version&gt; &lt;jstl.version&gt;1.2&lt;/jstl.version&gt; &lt;servlet-api.version&gt;2.5&lt;/servlet-api.version&gt; &lt;jsp-api.version&gt;2.0&lt;/jsp-api.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;!--Junit测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring核心--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--这个jar文件包含对Spring对JDBC数据访问进行封装的所有类 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--aop--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 整合mybatis框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- druid连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Servlet/JSP/JSTL --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;servlet-api.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;$&#123;jsp-api.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring与junit的整合--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--json--&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.8.11.3&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志--&gt; &lt;!--&lt;dependency&gt;--&gt; &lt;!--&lt;groupId&gt;log4j&lt;/groupId&gt;--&gt; &lt;!--&lt;artifactId&gt;log4j&lt;/artifactId&gt;--&gt; &lt;!--&lt;version&gt;1.2.17&lt;/version&gt;--&gt; &lt;!--&lt;/dependency&gt;--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 2、创建好目录结构123456789101112131415161718src |-main |-java //Java代码包 |-com.your.contorller //控制层 |-com.your.service //业务层 |-com.your.dao /持久层 |-com.your.entity //实体类 |-com.your.common //通用类 |-resource //资源包 |-mapper //mapper.xml |-jdbc.properties //数据库配置文件 |-log4j.properties //日志配置文件 |-spring-config.xml //spring的xml配置 |-spring-mvc.xml //springMVC配置 |-test //测试包 |-webapp |-WEB-INF |-web.xml 3、jdbc.properties的配置1234db.driverClassName=com.mysql.jdbc.Driverdb.url=jdbc:mysql:///test?characterEncoding=utf-8db.username=rootdb.password=123456 4、log4j.properties的配置1234567log4j.rootLogger=INFO,stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d [%-5p] %c - %m%nlog4j.logger.com.mybatis3=DEBUGlog4j.logger.com.db.sys=DEBUG 5、*mapper.xml的头文件1234567&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper &gt;&lt;/mapper&gt; 6、spring-config.xml的配置123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!--扫描com.zoe下的所有注解--&gt; &lt;context:component-scan base-package="com.zoe"/&gt; &lt;!--配置数据库--&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!--配置数据源--&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt; &lt;property name="driverClassName" value="$&#123;db.driverClassName&#125;"/&gt; &lt;property name="url" value="$&#123;db.url&#125;"/&gt; &lt;property name="username" value="$&#123;db.username&#125;"/&gt; &lt;property name="password" value="$&#123;db.password&#125;"/&gt; &lt;/bean&gt; &lt;!--配置sqlsessionfactory对象--&gt; &lt;bean class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;property name="typeAliasesPackage" value="com.zoe.entity"/&gt; &lt;property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/&gt; &lt;/bean&gt; &lt;!--配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中--&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.zoe.dao"/&gt; &lt;/bean&gt; &lt;!--使用注解实现aop--&gt; &lt;aop:aspectj-autoproxy/&gt; &lt;!--配置事务管理器--&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!--配置基于注解的声明式事务--&gt; &lt;tx:annotation-driven/&gt;&lt;/beans&gt; 7、spring-mvc.xml的配置1234567891011121314151617181920&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt; &lt;!--开启SpringMVC注解模式--&gt; &lt;mvc:annotation-driven/&gt; &lt;!--静态资源默认servlet配置--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--配置视图解析器--&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/pages"/&gt; &lt;property name="suffix" value=".html"/&gt; &lt;/bean&gt;&lt;/beans&gt; 8、web.xml配置12345678910111213141516171819202122232425262728293031&lt;!-- 编码过滤器 --&gt;&lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- 配置DispatcherServlet --&gt;&lt;servlet&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置springMVC需要加载的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;!--&lt;async-supported&gt;true&lt;/async-supported&gt;--&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;!-- 匹配所有请求，此处也可以配置成 *.do 形式 --&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本用法]]></title>
    <url>%2F2019%2F03%2F20%2FMarkdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown基本用法 一、标题123# 这是一级标题## 这是二级标题### 这是三级标题 二、字体1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…12&gt;这是引用的内容&gt;&gt;这是引用的内容 效果： 这是引用的内容 四、分割线三个或者三个以上的 - 或者 *1234-------******** 五、图片1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 六、超链接1[超链接名](超链接地址 &quot;超链接title&quot;) 七、列表 无序列表 123- 列表内容+ 列表内容* 列表内容 有序列表 1231. 列表内容2. 列表内容3. 列表内容 八、表格12345678910表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右 效果： 姓名 年龄 张某 25 韩某 18 邱某 20 九、代码1234`代码` //单行代码（```) 多行代码 //多行代码 (```)]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>补充</tag>
        <tag>用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的使用]]></title>
    <url>%2F2019%2F03%2F20%2Fhexo%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Hexo的搭建 张某的博客 Hexo常用命令123456789hexo n "文章名称" #新建文章，被放在\source\_posts目录下hexo n page "页面名称" #新建页面hexo g #生成静态页面至public目录hexo s #开启预览访问 http://localhost:4000 如果访问失败，可能是端口被占用hexo d #部署到GitHubhexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo s -g #生成并本地预览hexo d -g #生成并上传]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>补充知识</tag>
        <tag>工具的用法</tag>
      </tags>
  </entry>
</search>
