<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mybatis-plus]]></title>
    <url>%2F2019%2F04%2F29%2FMybatis-plus%2F</url>
    <content type="text"><![CDATA[1、JPA思想&#160; &#160; &#160; &#160;JPA是Java Persistence API的简称，中文名Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。采用面向对象的方式操作数据库。 2、Mybatis-plus2.1、简介MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 Mybatis-plus官网 2.2、引入jar包123456&lt;!--spring整合mybatis-plus --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.6&lt;/version&gt;&lt;/dependency&gt; 2.3、编辑yml配置文件1234567891011121314#mybatis-plus配置mybatis-plus: #别名包 type-aliases-package: com.zoe.pojo #引入映射文件 mapper-locations: classpath:/mybatis/mappers/*.xml #开启驼峰映射 configuration: map-underscore-to-camel-case: true#日志配置logging: level: #日志级别 com.yzy.mapper: debug 2.4、实现pojo映射123456789101112@Data@Accessors(chain=true)@TableName//实现对象与表映射关系//规则:如果对象的名称与表名一致则可以省略不写public class User &#123; @TableId(type=IdType.AUTO) //定义主键 private Integer id; private String name; private Integer age; private String sex;&#125; 2.5、实现接口继承12345//使用映射框架时,ById代表根据主键操作.public interface UserMapper extends BaseMapper&lt;User&gt;&#123; &#125; 2.6、Mybatis-plus测试1234567891011121314151617@RunWith(SpringRunner.class)@SpringBootTestpublic class TestMybatis &#123; @Autowired private UserMapper userMapper; @Test public void saveUser() &#123; User user = new User(); user.setName("测试mybaitsplus") .setAge(19) .setSex("男"); int rows = userMapper.insert(user); System.out.println("入库成功!!!影响"+rows); &#125;&#125; 2.6、Mybatis-plus底层实现原理例：userMapper.insert(user); 都是通过反射机制获取数据库. 首先获取user.class类型.之后通过class获取注解. 之后获取注解后,得到表名称. 如果字段与属性映射时,使用了驼峰映射规则,则编码时必须按照驼峰映射的条件编辑.否则程序映射报错.]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot]]></title>
    <url>%2F2019%2F04%2F29%2FSpringBoot%2F</url>
    <content type="text"><![CDATA[1、传统框架弊端 配置文件特别的繁琐. 配置时标签必须匹配. Mybatis操作时,即使再简单的sql都必须自己手写. 项目启动时必须依赖繁琐的jar包.jar包冲突问题难以解决. 现在项目启动时必须依赖tomcat插件/本地tomcat服务器. 2、SpringBoot简介&#160; &#160; &#160; &#160;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。 2.1、特点 创建独立的Spring应用程序 嵌入的Tomcat，无需部署WAR文件 简化Maven配置 自动配置Spring 提供生产就绪型功能，如指标，健康检查和外部配置 绝对没有代码生成并且对XML也没有配置要求 3、SpringBoot入门3.1、编辑主启动类12345678910@SpringBootApplication //springBoot主启动类. 主启动类所在的包路径就是包扫描的路径public class Springboot1DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(Springboot1DemoApplication.class, args); &#125; &#125; 3.2、application.yml配置123456789101112131415#yml是有层级关系的 #1.必须注意缩进 2.key与值之间使用:号链接 注意" "空格server: port: 8091 servlet: context-path: /#可以通过yml文件实现对象属性赋值#当spring容器启动时加载该配置#如果使用user.name当做可以 会自动的获取当前计算机用户名user: id: 110 username: 疯不觉 age: 18 sex: 男# 在pojo中 用vaule("$&#123;user.id&#125;")为属性赋值 3.3、批量为属性赋值1234567&lt;!--添加属性注入依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 12345678910111213@Component//@PropertySource(value="classpath:/properties/dog.properties")//表示加载任意的properties到spring容器中@ConfigurationProperties(prefix = "user")/** * 使用说明：在配置文件中查找user的前缀，之后如果属性的名称与 * key的名称一致，则利用对象的set方法进行属性赋值 */public class User &#123; private Integer uid; private String username; private Integer age; private String sex; ... 3.4、切换环境配置1234567891011#如果是多环境测试,则必须指定默认环境spring: profiles: active: dev spring: profiles: test--- #定义分割环境spring: profiles: dev #定义研发环境 3.5、tomcat热部署与Lombok插件123456789101112131415161718&lt;!--支持热部署 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;springloaded&lt;/artifactId&gt; &lt;version&gt;1.2.8.RELEASE&lt;/version&gt;&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--引入插件lombok 自动的set/get/构造方法插件 --&gt;&lt;!-- @Data == Getter+Setter和toString等@Accessors(chain=true) 链式加载 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;/dependency&gt; 3.6、SpringBoot整合mybatis1234567891011121314151617181920&lt;!--引入数据库驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--引入druid数据源 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.12&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring整合mybatis 暂时 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; 编辑YML文件 12345678910111213141516171819202122server: port: 8091 servlet: context-path: /spring: datasource: #引入druid数据源 type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/test username: root password: 123456 #整合mybatismybatis: #别名包 type-aliases-package: com.yzy.pojo #引入映射文件 mapper-locations: classpath:/mybatis/mappers/*.xml #开启驼峰映射 configuration: map-underscore-to-camel-case: true 编辑主启动类 123456789 @SpringBootApplication @MapperScan("com.yzy.mapper") //mapper接口包路径 public class SpringBootRun &#123; public static void main(String[] args) &#123; SpringApplication.run(SpringBootRun.class, args); &#125;&#125; 编辑测试类 12345678910111213 @RunWith(SpringRunner.class) //内部已经包含了spring容器 @SpringBootTest public class TestUser &#123; @Autowired private UserService userService; @Test public void testFindAll() &#123; System.out.println(userService.findAll()); &#125;&#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库高可用]]></title>
    <url>%2F2019%2F04%2F12%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E5%8F%AF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[关闭tmcat服务器 ps -ef | grep java -&gt;&gt; kill -9(强制)/15（友好）pid 1、数据库备份策略1.1、数据库冷备份概念：&#160; &#160; &#160; &#160;在固定的周期内，人为的将数据库中的数据进行备份，一般一式三份缺点： 可能会造成数据丢失 如果数据量太多，则可能会导致备份时间很长。 ps: 虽然冷备份缺点很多，但是冷备份是恢复数据的最后手段，最好使用 1.2、数据库热备份步骤： 当主库的数据发生变化时，会将更新的数据写入二进制日志文件中 从库中的IO线程会实时的监听主库的二进制日志文件，如果文件发生了变化，就会获取主库二进制文件中更新的记录，之后写入到从库的中继日志当中。 当中继日志中有数据时，从库会通过sql线程读取中继日志中的信息，之后会将数据进行同步 当上述操作完成后，主从同步完成，等待下一次同步 数据库进行主从备份时，一台主机可以配置n台从机，一般n为2—3. 1.3、数据库安装与配置安装命令：rpm -ivh ......rpm启动/停止/重启：service mysql start/stop/restart设定用户名和密码：mysqladmin -u root password root 1.3.1 远程连接数据库 (临时)关闭防火墙 service iptables stop 开启mysql对外访问权限 格式：GRANT ALL PRIVILEGES ON . TO ‘登录名‘@’登录ip,%为任意地址’ IDENTIFIED BY ‘登录密码’ grant all on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;root&#39;; ps: windows访问虚拟服务器 关闭Linux防火墙和开发MySQL对外访问权限，反之亦然。 1.4、实现数据库主从搭建1.4.1、修改主库二进制文件 修改配置文件：vim /etc/my.cnf 重启MySQL数据库 检查二进制日志文件是否正确—&gt;/var/lib/mysql/ —&gt;mysql-bin.000001 auto.cnf中server-uuid是数据库的唯一标识,默认情况下，如果主、从库的server-uuid或者server-id的值一样，将会导致主从复制报错中断。 1234567[root@localhost mysql]# cd /var/lib/mysql/[root@localhost mysql]# lsabcd jtdb mysql.sockauto.cnf localhost.localdomain.pid performance_schemaibdata1 mysql RPM_UPGRADE_HISTORYib_logfile0 mysql-bin.000001 RPM_UPGRADE_MARKER-LASTib_logfile1 mysql-bin.index test 添加从库二进制文件(server-id要不一致) 1.4.2、实现数据库主从挂载 检查主库的状态 SHOW MASTER STATUS 实现主从配置1234567891011121314151617181920/*挂载指令:change master to 主机IP 主机端口号 用户名 密码二进制日志文件名称 文件位置 */CHANGE MASTER TO MASTER_HOST="192.168.30.134",MASTER_PORT=3306,MASTER_USER="root",MASTER_PASSWORD="root",MASTER_LOG_FILE="mysql-bin.000001",MASTER_LOG_POS=120;#开启主从服务START SLAVE;#检查主从状态SHOW SLAVE STATUS;#如果主从同步搭建完成,测试#如果程序报错 没有2个yes 则根据日志修改 STOP SLAVE; 2、Amoeba2.1、Amoeba介绍&#160; &#160; &#160; &#160;Ameba是一个以Mysql为底层数据存储，并对应用提供Mysql协议接口的proxy。它集中的响应应用的请求，依据用户事先设置的规则，将SQL请求发送到特定的数据库上执行。基于此可以实现负载均衡、读写分离、高可用性等需求。 2.2、Amoeba的配置 Amoeba基于JDK开发，必须先安装JDK 2.2.1、编辑dbServer.xml1234&lt;!-- mysql user 定义MySQL的用户名密码 --&gt;&lt;property name="user"&gt;root&lt;/property&gt; &lt;property name="password"&gt;root&lt;/property&gt; 12345678910111213141516&lt;!--定义主库 --&gt;&lt;dbServer name=&quot;master&quot; parent=&quot;abstractServer&quot;&gt; &lt;factoryConfig&gt; &lt;!-- mysql ip --&gt; &lt;property name=&quot;ipAddress&quot;&gt;192.168.30.134&lt;/property&gt; &lt;!-- 如果用户名和密码与父级配置不同，则重新配置 --&gt; &lt;/factoryConfig&gt;&lt;/dbServer&gt;&lt;!-- 定义数据库从库 --&gt;&lt;dbServer name=&quot;slave1&quot; parent=&quot;abstractServer&quot;&gt; &lt;factoryConfig&gt; &lt;!-- mysql ip --&gt; &lt;property name=&quot;ipAddress&quot;&gt;192.168.30.135&lt;/property&gt; &lt;/factoryConfig&gt;&lt;/dbServer&gt; 12345678910&lt;!-- 配置读的池 --&gt;&lt;dbServer name="multiPool" virtual="true"&gt; &lt;poolConfig class="com.meidusa.amoeba.server.MultipleServerPool"&gt; &lt;!-- Load balancing strategy: 1=ROUNDROBIN , 2=WEIGHTBASED , 3=HA 轮询、权重、hash--&gt; &lt;property name="loadbalance"&gt;1&lt;/property&gt; &lt;!-- Separated by commas,such as: server1,server2,server1 配置读池 --&gt; &lt;property name="poolNames"&gt;slave1,master,slave1&lt;/property&gt; &lt;/poolConfig&gt;&lt;/dbServer&gt; 2.2.2、编辑Amoeba.xml 检查Amoeba端口号 123&lt;service name="Amoeba for Mysql" class="com.meidusa.amoeba.mysql.server.MySQLService"&gt; &lt;!-- port --&gt; &lt;property name="port"&gt;8066&lt;/property&gt; 设定用户名和密码 123456&lt;property name="authenticateProvider"&gt; &lt;bean class="com.meidusa.amoeba.mysql.server.MysqlClientAuthenticator"&gt; &lt;property name="user"&gt;root&lt;/property&gt; &lt;property name="password"&gt;root&lt;/property&gt; 添加默认项 12345678910&lt;property name="sqlFunctionFile"&gt;$&#123;amoeba.home&#125;/conf/functionMap.xml&lt;/property&gt; &lt;property name="LRUMapSize"&gt;1500&lt;/property&gt; &lt;!--默认--&gt; &lt;property name="defaultPool"&gt;master&lt;/property&gt; &lt;!-- 配置读写分离 --&gt; &lt;property name="writePool"&gt;master&lt;/property&gt; &lt;property name="readPool"&gt;multiPool&lt;/property&gt; &lt;property name="needParse"&gt;true&lt;/property&gt; 2.2.3、修改jvm.properties12345678# JVM相关的参数，包括内存配置、垃圾回收策略# amoeba要求单个线程至少217k -Xss JVM_OPTIONS="-server -Xms256m -Xmx1024m -Xss256k -XX:PermSize=16m -XX:MaxPermSize=96m"# 应用程序忽略的信号列表，以逗号分割，程序shutdown的信号为15（可用 kill -15 pid 可让程序文明的shutdown，请不要在这儿填15）IGNORE_SIGNALS=1,2 2.3、测试Amoeba 启动Amoeba./launcher 停止Amoeba./shutdown 2.3.1、负载均衡测试只有读操作才能实现负载均衡，我们现在配置的是轮询，slave1,master,slave1所以只要修改从库中的数据就能检查负载均衡是否成功 2.3.2、读写分离测试通过网页修改数据，检查从库中的数据是否同步 3、双机热备实现]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>高可用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx]]></title>
    <url>%2F2019%2F04%2F10%2Fnginx%2F</url>
    <content type="text"><![CDATA[Nginx 1、Nginx介绍&#160; &#160; &#160; &#160;Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点开发的，第一个公开版本0.1.0发布于2004年10月4日。其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。&#160; &#160; &#160; &#160;Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。轻量级: 1.c语言开发的. 每次启动时会开启2个进程项.每个进程占用空间不到2M.并发能力强:官方数据理论值5万/秒, 实测:3万/秒核心特点:就是请求的转发.nginx是开源免费的.硬件负载均衡器:F5 2、Nginx官网 网址: http://nginx.org/en/download.html 3、Nginx的使用 每次启动Nginx会启动2个进程项.一个是主进程.一个是守护进程.主进程:主要实现反向代理/负载均衡守护进程:防止主进程意外关闭.手动关闭：先关闭守护进程(内存小的),之后关闭主进程(内存大的). 3.1、Nginx命令 如果执行nginx命令,则必须在nginx.exe所在的根目录中执行 启动: start nginx 重启: nginx –s reload 必须先启动再重启 关闭: nginx –s stop 3.2、Nginx配置文件通过server表示一个反向代理的配置(默认配置)1234567891011121314server &#123; #表示监听的端口号 一般都是80 listen 80; #表示需要拦截的域名 server_name localhost; #真实的反向代理 location / &#123; #root是关键字 表示反向代理的是一个文件夹 root html; #默认访问页面 index index.html index.htm; &#125;&#125; 配置图片服务器12345678server &#123; listen 80; server_name image.yzy.com; location / &#123; root F:/upload; &#125; &#125; 本地测试可以修改HOSTS文件 127.0.0.1 image.yzy.com 配置后台服务器,实现域名的代理 123456789server &#123; listen 80; server_name manage.yzy.com; location / &#123; proxy_pass http://localhost:8091; &#125;&#125; 搭建tomcat集群,实现负载均衡 生成N个基于spring boot的war包 启动tomcat服务器: java -jar tomcat-8091.war 12345678910111213141516171819#配置windows tomcat集群 upstream zoe &#123; server 127.0.0.1:8091; server 127.0.0.1:8092; server 127.0.0.1:8093; &#125; #配置后台服务器 实现域名的代理 server &#123; listen 80; server_name manage.zoe.com; location / &#123; proxy_pass http://zoe; #proxy_pass http://localhost:8091; #实现tomcat集群配置 名称必须一致 &#125; &#125; 4、Nginx高级4.1、负载均衡4.1.1、轮询策略 根据配置文件的顺序,依次访问服务器 4.1.2、权重策略 权重:给性能更好的服务器多分配请求.权重值越大,分担的请求数量越多. 123456#配置windows tomcat集群 策略1:轮询 策略2:权重 upstream zoe &#123; server 127.0.0.1:8091 weight=6; server 127.0.0.1:8092 weight=3; server 127.0.0.1:8093 weight=1; &#125; 4.1.3、IPHASH(了解)问题:&#160; &#160; &#160; &#160;由于tomcat服务器中的session不能共享.所以将用户信息保存到了session的做法可能会导致用户频繁登录的现象.如何解决:&#160; &#160; &#160; &#160;让用户绑定固定的服务器.用户每次访问都访问同一台tomcat服务器.如何实现:&#160; &#160; &#160; &#160;利用IP地址进行hash运算,之后将IP地址绑定指定的服务器.引出新问题: 负载不均. IP地址可能会发生变化.导致数据无法共享 如果服务器宕机,则链接该服务器的用户都发受到影响. 技术升级: 实现SSO&#160; &#160; &#160; &#160;SSO英文全称Single Sign On，单点登录。SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。它包括可以将这次主要的登录映射到其他应用中用于同一个用户的登录的机制。它是目前比较流行的企业业务整合的解决方案之一。 4.2、Nginx高可用4.2.1、down属性 如果后台服务器因为人为的因素可以设置为down,down之后nginx将不会把请求发往该机器.1234upstream zoe&#123; ... server 127.0.0.1:8091 dowm;&#125; 4.2.2、backup策略 backup表示备用机,当主服务器不能及时响应时,或者主服务器宕机时,这时备用才会生效.1234upstream zoe&#123; ... server 127.0.0.1:8091 backup;&#125; 4.2.3、Nginx健康检测Nginx高版本特性: &#160; &#160; &#160; &#160;当服务器不能响应时,nginx会自动的访问下一台服务器.直到访问成功为止.并且在短时间内不会再次访问故障机.&#160; &#160; &#160; &#160;如果在低版本中用户访问故障机时,会一直等到服务超时才会访问下一台.原理说明:&#160; &#160; &#160; &#160;当nginx访问故障机时,记录该机器的信息,之后在指定的周期内不会再次访问该故障机.直到下一个周期请求故障机.配置信息: max_fails=1 最大失败次数1次后开始实现健康检测的机制 fail_timeout=60s; 在60秒之内不会再次访问故障机. 123456789101112131415161718192021#配置windows tomcat集群 策略1:轮询 策略2:权重 策略3:iphash 优先级最高 upstream zoe &#123; #ip_hash; server 127.0.0.1:8091 max_fails=1 fail_timeout=60s; server 127.0.0.1:8092 max_fails=1 fail_timeout=60s; server 127.0.0.1:8093 max_fails=1 fail_timeout=60s; &#125; #配置后台服务器 实现域名的代理 server &#123; listen 80; server_name manage.zoe.com; location / &#123; proxy_pass http://zoe; #proxy_pass http://localhost:8091; #实现tomcat集群配置 名称必须一致 proxy_connect_timeout 2; proxy_read_timeout 2; proxy_send_timeout 2; &#125; &#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架小记]]></title>
    <url>%2F2019%2F03%2F28%2FSSM%E6%A1%86%E6%9E%B6%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[SSM框架小记 持续更新中…… 关于使用集合的说明使用util标签引入集合时需要注意，必须使用#{id}引入文件层级只能写一级，否则文件解析异常。例如：username=rootpassword=root mybatis核心配置文件的驼峰命名规则12345&lt;settings&gt; &lt;!-- 是否开启自动驼峰命名规则（camel case）映射， 即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true" /&gt;&lt;/settings&gt; 配置全局异常类为了更好的用户体验，不会在页面上显示500，404等错误，便需要配置全局异常类（最好定义好JsonResult[通常有state,msg,data三个属性,有传异常形参的构造方法],以便统一返回值）ps:别忘了需要包扫描到此类！123456789101112131415161718192021222324252627/**@ControllerAdvice 修饰的类一般为springmvc中的全局异常处理类，此类中可以定义一些异常处理方法*///@RestControllerAdvice ==@ControllerAdvice+@ResponseBody@ControllerAdvicepublic class GlobalExceptionHandler&#123; /** @ExceptionHandler异常处理方法 */ @ExceptionHandler(ServiceException.class) @ResponseBody pulbic JsonResult doHandleServiceException(ServiceException e)&#123; e.printStackTrace(); return new JsonResult(e); &#125; @ExceptionHandler(RuntimeException.class) @ResponseBody public JsonResult doHandleRuntimeException(RuntimeException e)&#123; e.printStackTrace(); JsonResult r=new JsonResult(); r.setMessage("底层出现了运行时错误，请稍后"); r.setState(0); return r; &#125;&#125; restful风格 Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。 资源：互联网所有的事物都可以被抽象为资源 资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。分别对应 添加、 删除、修改、查询。 使用RESTful操作资源http://127.0.0.1/item/1 查询,GEThttp://127.0.0.1/item 新增,POSThttp://127.0.0.1/item 更新,PUThttp://127.0.0.1/item/1 删除,DELETE 从URL上获取参数1.使用注解@RequestMapping(&quot;item/{id}&quot;)声明请求的url2.使用(@PathVariable() Integer id)获取url上的数据 拦截器拦截器类似于Servlect中的Fileter，用于对处理器进行预处理和后处理实现HandlerInterceptor接口123456789101112131415161718192021222324public class HandlerInterceptor1 implements HandlerInterceptor &#123; // controller执行后且视图返回后调用此方法 // 这里可得到执行controller时的异常信息 // 这里可记录操作日志 public void afterCompletion(...)&#123; ... &#125; // controller执行后但未返回视图前调用此方法 // 这里可在返回用户前对模型数据进行加工处理，比如这里加入公用信息以便页面显示 public void postHandle(...)&#123; ... &#125; // Controller执行前调用此方法 // 返回true表示继续执行，返回false中止执行 // 这里可以加入登录校验、权限拦截等 public boolean preHandle(...)&#123; ... return true; &#125; &#125; 1234567891011&lt;!-- 配置拦截器 --&gt;&lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;!-- 所有的请求都进入拦截器 --&gt; &lt;mvc:mapping path="/**" /&gt; &lt;!-- 不拦截静态资源 --&gt; &lt;mvc:exclude-mapping path="/assets"/&gt; &lt;!-- 配置具体的拦截器 --&gt; &lt;bean class="com.yzy.common.interceptor.HandlerInterceptor1" /&gt; &lt;ref bean="handlerInterceptor1"/&gt; #另一种配置 &lt;/mvc:interceptor&gt; 总结preHandle按拦截器定义顺序调用postHandler按拦截器定义逆序调用afterCompletion按拦截器定义逆序调用 postHandler在拦截器链内所有拦截器返成功调用afterCompletion只有preHandle返回true才调用 图片上传的业务逻辑 确定url地址,确定提交的参数名称. 可以通过文件的后缀判断是否为图片类型. png|jpg|gif 通过第三方工具判断是否为恶意程序,获取图片的宽度和高度. 为了提高检索效率,分文件储存. 按照商品类型 需要解决文件存储不均衡的现象. 指定文件夹大小,例如保存满2000张图片后新创建文件夹. 不成熟 按照时间进行储存. yyyy/MM/dd/HH 365个文件夹 防止文件重名现象. 利用时间戳生成名称+加随机数3位 UUID:保证每次生成的串”都不相同” 1/存储数据 32位16进制数据 md5(盐值+随机数) 实现文件上传. 将图片信息保存到了本地磁盘中. 生成网络请求的虚拟路径.方便其他人访问.]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工具类和插件]]></title>
    <url>%2F2019%2F03%2F27%2F%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8C%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[工具类和插件 持续更新中…… 表单校验插件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;!-- jQuery Validation 1.14.0 --&gt;&lt;script src="/static/assets/plugins/jquery-validation/js/jquery.validate.js"&gt;&lt;/script&gt; &lt;!--自定义校验--&gt;&lt;script src="/static/assets/plugins/jquery-validation/js/additional-methods.js"&gt;&lt;/script&gt; &lt;!--国际化标准--&gt;&lt;script src="/static/assets/plugins/jquery-validation/js/localization/messages_zh.js"&gt;&lt;/script&gt; &lt;!-- 例子1 --&gt;&lt;form:input path="username" class="form-control required" placeholder="用户名" /&gt;$(function () &#123; $("#inputForm").validate(&#123; errorElement: 'span', errorClass: 'help-block', errorPlacement: function (error, element) &#123; element.parent().parent().attr("class", "form-group has-error"); error.insertAfter(element); &#125; &#125;);&#125;);&lt;!-- 例子2 写在js文件中--&gt;/**函数对象*/var Validate=function()&#123; /**初始化 相当于私有属性*/ var handlerInitValidate=function()&#123; /**手机校验规则*/ $.validator.addMethod("mobile", function (value, element) &#123; var length = value.length; var mobile = /^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;))+\d&#123;8&#125;)$/; return this.optional(element) || (length == 11 &amp;&amp; mobile.test(value)); &#125;, "手机号码格式错误"); &#125;; /** * 表单验证 * @param formId */ var handlerValidate = function (formId) &#123; $("#" + formId).validate(&#123; errorElement: 'span', errorClass: 'help-block', errorPlacement: function (error, element) &#123; element.parent().parent().attr("class", "form-group has-error"); error.insertAfter(element); &#125; &#125;); &#125;; return &#123; /**返回初始方法 相当于类中方法,方法名为init*/ init:function()&#123; handlerInitValidate(); &#125;, /** * 表单验证 需要前端去调用 * @param formId */ validateForm: function (formId) &#123; handlerValidate(formId); &#125; &#125;&#125;();/**文档加载*/$(function()&#123; Validate.init();&#125;) 参考网站 http://www.runoob.com/jquery/jquery-plugin-validate.html iCheck 复选/单选美化插件 http://blog.funtl.com:8080/2018/06/18/appose/jQuery-iCheck/ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!-- iCheck for checkboxes and radio inputs --&gt;&lt;link rel="stylesheet" href="/static/assets/plugins/iCheck/all.css"&gt;&lt;!-- iCheck 1.0.1 --&gt;&lt;script src="/static/assets/plugins/iCheck/icheck.min.js"&gt;&lt;/script&gt;&lt;!-- 前端Script中 --&gt;&lt;script&gt;&lt;script&gt;/** App.js 放在js文件中的函数对象*/var App=function()&#123; /**私有属性 初始化iCheck*/ var handlerInitCheckbox=function()&#123; /**默认情况下 iCheck 是不生效的 需要激活*/ $('input[type="checkbox"].minimal, input[type="radio"].minimal').iCheck(&#123; checkboxClass: 'icheckbox_minimal-blue', radioClass : 'iradio_minimal-blue' &#125;); //获取表头CheckBox _masterCheckBox=$('input[type="checkbox"].minimal.icheck_master'); //获取全部CheckBox集合 _checkbox=$('input[type="checkbox"].minimal'); &#125;; /**Checkbox全选功能*/ var handlerCheckboxAll=function()&#123; _masterCheckBox.on("ifClicked",function(e)&#123; //返回true表示未选中 if(e.target.checked)&#123; _checkbox.iCheck("uncheck"); //选中状态 &#125;else&#123; _checkbox.iCheck("check"); &#125; &#125;); &#125;; return&#123; init:function()&#123; handlerInitCheckbox(); handlerCheckboxAll(); &#125; //通过方法 获取全部CheckBox集合 getCheckbox:function()&#123; return _checkbox; &#125; &#125;&#125;(); $(function()&#123; App.init(); &#125;);]]></content>
      <categories>
        <category>拓展</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架的搭建]]></title>
    <url>%2F2019%2F03%2F22%2FSSM%E6%A1%86%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[SSM框架的搭建 在IDEA中进行最基本的SSM框架搭建 1、pom.xml的配置添加 Junit依赖，spring依赖，mybatis依赖，mybatis-spring依赖，MySQL驱动依赖,druid连接池依赖，Servlet/JSP/JSTL，json依赖，日志依赖。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;spring.version&gt;4.1.3.RELEASE&lt;/spring.version&gt; &lt;mybatis.version&gt;3.5.0&lt;/mybatis.version&gt; &lt;mybatis.spring.version&gt;1.3.2&lt;/mybatis.spring.version&gt; &lt;mysql.version&gt;5.1.32&lt;/mysql.version&gt; &lt;druid.version&gt;1.1.6&lt;/druid.version&gt; &lt;jstl.version&gt;1.2&lt;/jstl.version&gt; &lt;servlet-api.version&gt;2.5&lt;/servlet-api.version&gt; &lt;jsp-api.version&gt;2.0&lt;/jsp-api.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;!--Junit测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--spring核心--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--这个jar文件包含对Spring对JDBC数据访问进行封装的所有类 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--aop--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 整合mybatis框架 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- mysql驱动 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- druid连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Servlet/JSP/JSTL --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;servlet-api.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;$&#123;jsp-api.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;$&#123;jstl.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring与junit的整合--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--json--&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.8.11.3&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志--&gt; &lt;!--&lt;dependency&gt;--&gt; &lt;!--&lt;groupId&gt;log4j&lt;/groupId&gt;--&gt; &lt;!--&lt;artifactId&gt;log4j&lt;/artifactId&gt;--&gt; &lt;!--&lt;version&gt;1.2.17&lt;/version&gt;--&gt; &lt;!--&lt;/dependency&gt;--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;!-- 配置tomcat端口 --&gt; &lt;port&gt;8080&lt;/port&gt; &lt;path&gt;/&lt;path&gt; &lt;/configuration&gt; &lt;/plugin&gt; 2、创建好目录结构123456789101112131415161718src |-main |-java //Java代码包 |-com.your.contorller //控制层 |-com.your.service //业务层 |-com.your.dao /持久层 |-com.your.entity //实体类 |-com.your.common //通用类 |-resource //资源包 |-mapper //mapper.xml |-jdbc.properties //数据库配置文件 |-log4j.properties //日志配置文件 |-spring-config.xml //spring的xml配置 |-spring-mvc.xml //springMVC配置 |-test //测试包 |-webapp |-WEB-INF |-web.xml 3、jdbc.properties的配置1234db.driverClassName=com.mysql.jdbc.Driverdb.url=jdbc:mysql:///test?characterEncoding=utf-8db.username=rootdb.password=123456 4、log4j.properties的配置1234567log4j.rootLogger=INFO,stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d [%-5p] %c - %m%nlog4j.logger.com.mybatis3=DEBUGlog4j.logger.com.db.sys=DEBUG 5、*mapper.xml的头文件1234567&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper &gt;&lt;/mapper&gt; 6、spring-config.xml的配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!--扫描com.zoe下的所有注解--&gt; &lt;context:component-scan base-package="com.zoe"/&gt; &lt;!--配置数据库--&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!--配置数据源--&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"&gt; &lt;property name="driverClassName" value="$&#123;db.driverClassName&#125;"/&gt; &lt;property name="url" value="$&#123;db.url&#125;"/&gt; &lt;property name="username" value="$&#123;db.username&#125;"/&gt; &lt;property name="password" value="$&#123;db.password&#125;"/&gt; &lt;/bean&gt; &lt;!--配置sqlsessionfactory对象--&gt; &lt;bean class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;property name="typeAliasesPackage" value="com.zoe.entity"/&gt; &lt;property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/&gt; &lt;/bean&gt; &lt;!--配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中--&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.zoe.dao"/&gt; &lt;/bean&gt; &lt;!--使用注解实现aop--&gt; &lt;aop:aspectj-autoproxy/&gt; &lt;!--配置事务管理器--&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!--配置基于注解的声明式事务--&gt; &lt;tx:annotation-driven/&gt;&lt;/beans&gt; 7、spring-mvc.xml的配置123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt; &lt;!--开启SpringMVC注解模式--&gt; &lt;mvc:annotation-driven/&gt; &lt;!--静态资源默认servlet配置--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--配置视图解析器--&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/pages"/&gt; &lt;property name="suffix" value=".html"/&gt; &lt;/bean&gt;&lt;/beans&gt; 8、web.xml配置12345678910111213141516171819202122232425262728293031&lt;!-- 编码过滤器 --&gt;&lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;!-- 配置DispatcherServlet --&gt;&lt;servlet&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置springMVC需要加载的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;!--&lt;async-supported&gt;true&lt;/async-supported&gt;--&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt; &lt;!-- 匹配所有请求，此处也可以配置成 *.do 形式 --&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本用法]]></title>
    <url>%2F2019%2F03%2F20%2FMarkdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown基本用法 一、标题123# 这是一级标题## 这是二级标题### 这是三级标题 二、字体1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…12&gt;这是引用的内容&gt;&gt;这是引用的内容 效果： 这是引用的内容 四、分割线三个或者三个以上的 - 或者 *1234-------******** 五、图片1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 六、超链接1[超链接名](超链接地址 &quot;超链接title&quot;) 七、列表 无序列表 123- 列表内容+ 列表内容* 列表内容 有序列表 1231. 列表内容2. 列表内容3. 列表内容 列表嵌套 上一级和下一级之间敲三个空格即可 八、表格12345678910表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右 效果： 姓名 年龄 张某 25 韩某 18 邱某 20 九、代码1234`代码` //单行代码（```) 多行代码 //多行代码 (```) 十、首行缩进1&amp;#160; &amp;#160; &amp;#160; &amp;#160;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>补充</tag>
        <tag>用法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的使用]]></title>
    <url>%2F2019%2F03%2F20%2Fhexo%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Hexo的搭建 张某的博客 Hexo常用命令123456789hexo n "文章名称" #新建文章，被放在\source\_posts目录下hexo n page "页面名称" #新建页面hexo g #生成静态页面至public目录hexo s #开启预览访问 http://localhost:4000 如果访问失败，可能是端口被占用hexo d #部署到GitHubhexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo s -g #生成并本地预览hexo d -g #生成并上传]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>补充知识</tag>
        <tag>工具的用法</tag>
      </tags>
  </entry>
</search>
